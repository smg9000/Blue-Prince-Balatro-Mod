[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''chips_text = '0','''
position = 'after'
payload = '''bp_experiment_cause = 'none',
bp_experiment_effect = 'none',
bp_prescence_check = {},
bp_bedroom = 0,'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''G.GAME.stake > 1 and {'''
position = 'before'
payload = '''{
    label = localize('b_experiments'),
    tab_definition_function = G.UIDEF.active_experiment,
},'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''function G.UIDEF.card_focus_ui(card)'''
position = 'before'
payload = '''function G.UIDEF.active_experiment()

    local cause = localize(G.GAME.bp_experiment_cause, 'causes')
    local effect = localize(G.GAME.bp_experiment_effect, 'effects')

    local t = {n=G.UIT.ROOT, config={align = "cm", padding = 0.1, colour = G.C.CLEAR, minh = 8, minw = 7}, nodes={
        {n=G.UIT.R, config={align = "cm", colour = G.C.CLEAR, padding = 0.3}, nodes = {
            {n=G.UIT.R, config={align = "cm", padding = 0.3, colour = G.C.BLACK, r = 0.1, maxw=3}, nodes={
                {n=G.UIT.T, config={ref_table = {cause}, ref_value = 1, scale = 0.4, colour = G.C.UI.TEXT_LIGHT, shadow = true}},
            }},
            {n=G.UIT.R, config={align = "cm", padding = 0.3, colour = G.C.BLACK, r = 0.1, maxw=3}, nodes={
                {n=G.UIT.T, config={ref_table = {effect}, ref_value = 1, scale = 0.4, colour = G.C.UI.TEXT_LIGHT, shadow = true}},
            }},
        }}}
    }

    return t
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.blind:set_blind(G.GAME.round_resets.blind)'''
position = 'before'
payload = '''if G.GAME.bp_experiment_cause == 'select_blind' then 
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''c1.area:remove_card(c1)'''
position = "before"
payload = '''if G.shop and (G.GAME.bp_experiment_cause == 'item_bought_lose_3') then
    ease_dollars(-3)
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''draw_card(G.hand, G.play, 1, 'up', true, card, nil, true)'''
position = 'before'
payload = '''if ((area == G.shop_jokers) or (area == G.shop_vouchers) or (area == G.shop_booster)) and (G.GAME.bp_experiment_cause == 'item_bought_lose_3') then
    ease_dollars(-3)
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        })) 
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.skip_booster = function(e)'''
position = "after"
payload = '''if G.GAME.bp_experiment_cause == 'skip_booster' then
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''local _tag = e.UIBox:get_UIE_by_ID('tag_container')'''
position = "after"
payload = '''if _tag and (G.GAME.bp_experiment_cause == 'skip_blind') then
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''ease_dollars(self.sell_cost)'''
position = 'after'
payload = '''
if (G.GAME.bp_experiment_cause == 'sell_joker_with_retrigger') and (self.ability.set == "Joker") then
    local text = G.localization.descriptions.Joker[self.config.center.key].text
    local valid = false
    for i = 1, #text do
        if string.find(string.lower(text[i]), "all") then
            valid = true
            break
        end
    end
    if valid then
        if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
            local effect = G.GAME.bp_experiment_effect
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    do_experiment_effect(effect)
                    return true
                end
            }))
        end
    end
end
if G.GAME.bp_bedroom and (G.GAME.bp_bedroom > 0) and not (self.config and self.config.center and (self.config.center.key == 'j_bp_bedroom')) and (self.ability.set == "Joker") then
    card_eval_status_text(self, 'jokers', nil, nil, nil, {colour = HEX("6a23a1"), message = localize('k_ex_bedroom')})
    local amt = math.min(G.GAME.bp_bedroom, G.jokers.config.card_limit - (#G.jokers.cards + G.GAME.joker_buffer) + (self.edition and self.edition.negative and 0 or 1))
    G.GAME.joker_buffer = G.GAME.joker_buffer + 1
    G.GAME.bp_bedroom = 0
    for i = 1, amt do
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                local card = create_card('Joker', G.jokers, nil, nil, nil, nil, 'j_bp_bedroom', 'bed')
                card:add_to_deck()
                G.jokers:emplace(card)
                G.GAME.joker_buffer = 0
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:use_consumeable(area, copier)'''
position = 'after'
payload = '''   if (G.GAME.bp_experiment_cause == 'next_5_spectral_use') and G.GAME.bp_spectral_uses_left and (G.GAME.bp_spectral_uses_left > 0) and (self.ability.set == "Spectral") then
        G.GAME.bp_spectral_uses_left = G.GAME.bp_spectral_uses_left - 1
        if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
            local effect = G.GAME.bp_experiment_effect
            G.E_MANAGER:add_event(Event({
                trigger = 'immediate',
                func = function()
                    do_experiment_effect(effect)
                    return true
                end
            }))
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.deck:hard_set_T()'''
position = "before"
payload = '''if (G.GAME.bp_experiment_cause == 'randomly_each_round') and (G.GAME.current_round.random_activation == 'cash_out') then
    G.GAME.current_round.random_this_round_active = true
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.CONTROLLER.locks.toggle_shop = true'''
position = "after"
payload = '''if G.shop and (G.GAME.bp_experiment_cause == 'randomly_each_round') and (G.GAME.current_round.random_activation == 'end_shop') then
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        })) 
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''check_for_unlock({type = 'hand_contents', cards = G.play.cards})'''
position = "after"
payload = '''if (G.GAME.bp_experiment_cause == 'randomly_each_round') and (((G.GAME.current_round.random_activation == 'rand_hand') and (pseudorandom('rngpick') < 0.5)) or (G.GAME.current_round.random_activation == 'first_hand')) and not G.GAME.current_round.random_this_round_active then
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.FUNCS.draw_from_hand_to_discard()'''
position = "before"
payload = '''if (G.GAME.bp_experiment_cause == 'randomly_each_round') and not G.GAME.current_round.random_this_round_active then
    if do_pre_experiment_effect(G.GAME.bp_experiment_effect) then
        local effect = G.GAME.bp_experiment_effect
        G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
                do_experiment_effect(effect)
                return true
            end
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.GAME.used_jokers[self.config.center.key] = true'''
position = "after"
payload = '''update_prescence(self.config.center.key, 1)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.GAME.used_jokers[self.config.center.key] = true'''
position = "after"
payload = '''update_prescence(self.config.center.key, 1)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''::skip_game_actions_during_remove::'''
position = "before"
payload = '''if not G.OVERLAY_MENU and self.config.center.key then
    update_prescence(self.config.center.key, -1)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.config.center = center'''
position = "before"
payload = '''if old_center and old_center.key and not initial then
    update_prescence(old_center.key, -1)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''pool_opts = pool_opts or {}'''
position = 'after'
payload = '''if pool_opts.allow_duplicates then 
    bp_ignore_prescence_cards[v.key] = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''if card.config.center.set == 'Tarot' or card.config.center.set == 'Planet' then'''
position = 'before'
payload = '''if card.config.center.set == 'Tarot' then
    G.E_MANAGER:add_event(Event({
          trigger = 'immediate',
          func = function()
            G.E_MANAGER:add_event(Event({
              trigger = 'immediate',
              func = function()
                G.GAME.last_tarot = card.config.center_key
                return true
              end
            }))
            return true
        end
    }))
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''_starting_pool, _pool_key = G.P_JOKER_RARITY_POOLS[rarity], 'Joker'..rarity..((not _legendary and _append) or '')'''
position = 'before'
payload = '''bp_pool_rarity = ((rarity ~= nil) and rarity) or _rarity'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == "Brainstorm" then'''
position = 'before'
payload = '''if (self.ability.name == "bp_Aquarium") then
    if not context.no_blueprint then
        local bp_extras = {}
        for i = 1, #G.jokers.cards do
            local new_context = {}
            for j, k in pairs(context) do
                new_context[j] = k
            end
            if G.jokers.cards[i] and (G.jokers.cards[i] ~= self) and G.jokers.cards[i].config and (G.jokers.cards[i].config.center.rarity == 1) then
                local other_joker = G.jokers.cards[i]
                if (new_context.blueprint or 0) > #G.jokers.cards then return end
                local old_context_blueprint = new_context.blueprint
                new_context.blueprint = (new_context.blueprint and (new_context.blueprint + 1)) or 1
                local old_context_blueprint_card = new_context.blueprint_card
                new_context.blueprint_card = new_context.blueprint_card or self
                local eff_card = new_context.blueprint_card
                local other_joker_ret = other_joker:calculate_joker(new_context)
                new_context.blueprint = old_context_blueprint
                new_context.blueprint_card = old_context_blueprint_card
                if other_joker_ret then 
                    other_joker_ret.card = eff_card
                    other_joker_ret.colour = G.C.PURPLE
                    table.insert(bp_extras, other_joker_ret)
                end
            end
        end
        if #bp_extras > 0 then
            if context.repetition then
                local rep_count = 0
                for i = 1, #bp_extras do
                    local j = 1
                    local search = bp_extras[i]
                    while j < 100 do
                        if search.repetitions then
                            rep_count = rep_count + search.repetitions
                        end
                        search = search.extra
                        if (search == nil) or (type(search) ~= 'table') then
                            break
                        end
                    end
                end
                return {
                    message = localize('k_again_ex'),
                    repetitions = rep_count,
                    card = self,
                    colour = G.C.PURPLE
                }
            end
            return {
                bp_extras = bp_extras
            }
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then'''
position = 'before'
payload = '''if self.ability.name == 'bp_Aquarium' then
    local found = false
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i] and (G.jokers.cards[i] ~= self) and G.jokers.cards[i].config and (G.jokers.cards[i].config.center.rarity == 1) and G.jokers.cards[i].config.center.blueprint_compat then
            found = true
            break
        end
    end
    if found then
        self.ability.blueprint_compat = 'compatible'
    else
        self.ability.blueprint_compat = 'incompatible'
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''elseif self.ability.name == 'Brainstorm' then'''
position = 'before'
payload = '''elseif self.ability.name == 'bp_Aquarium' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:flip()'''
position = 'after'
payload = '''   if self.ability.bp_darkroomed and (self.facing == 'back') and (self.area == G.shop_jokers) then
        return
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = 'after'
payload = '''if self.ability and self.ability.bp_darkroomed and (self.facing == 'front') and (self.area == G.shop_jokers) then self.facing = 'back';self.sprite_facing = 'back' end
if self.ability and self.ability.bp_darkroomed and (self.area ~= G.shop_jokers) then
    self.ability.bp_darkroomed = nil
    if (self.facing == 'back') then
        self:flip()
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if v.rarity and v.set == 'Joker' and not v.demo then table.insert(self.P_JOKER_RARITY_POOLS[v.rarity], v) end'''
position = 'after'
payload = '''if v.bp_include_pools then
    for i = 1, #v.bp_include_pools do
        if not G.P_CENTER_POOLS[v.bp_include_pools[i]] then
            G.P_CENTER_POOLS[v.bp_include_pools[i]] = {}
        end
        table.insert(G.P_CENTER_POOLS[v.bp_include_pools[i]], v)
        if not G['P_' .. string.upper(v.bp_include_pools[i]) .. '_RARITY_POOLS'] then
            G['P_' .. string.upper(v.bp_include_pools[i]) .. '_RARITY_POOLS'] = {
                [1] = {},
                [2] = {},
                [3] = {},
                [4] = {},
            }
        end
        table.insert(G['P_' .. string.upper(v.bp_include_pools[i]) .. '_RARITY_POOLS'][v.rarity], v)
        table.sort(G['P_' .. string.upper(v.bp_include_pools[i]) .. '_RARITY_POOLS'][v.rarity], function (a, b) return a.order < b.order end)
        local vanilla_rarities = {["Common"] = 1, ["Uncommon"] = 2, ["Rare"] = 3, ["Legendary"] = 4}
        if vanilla_rarities[v.rarity] then
            table.insert(G['P_' .. string.upper(v.bp_include_pools[i]) .. '_RARITY_POOLS'][vanilla_rarities[v.rarity]], v)
            table.sort(G['P_' .. string.upper(v.bp_include_pools[i]) .. '_RARITY_POOLS'][vanilla_rarities[self.rarity]], function (a, b) return a.order < b.order end)
        end
        table.sort(G.P_CENTER_POOLS[v.bp_include_pools[i]], function (a, b) return a.order < b.order end)
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.P_LOCKED = {}'''
position = 'after'
payload = '''local bp_added_pools = {}
G.P_CENTERS['j_gros_michel'].bp_include_pools = {"Food"}
G.P_CENTERS['j_ice_cream'].bp_include_pools = {"Food"}
G.P_CENTERS['j_cavendish'].bp_include_pools = {"Food"}
G.P_CENTERS['j_diet_cola'].bp_include_pools = {"Food"}
G.P_CENTERS['j_popcorn'].bp_include_pools = {"Food"}
G.P_CENTERS['j_ramen'].bp_include_pools = {"Food"}
G.P_CENTERS['j_selzer'].bp_include_pools = {"Food"}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''table.sort(self.P_CENTER_POOLS["Seal"], function (a, b) return a.order < b.order end)'''
position = 'after'
payload = '''for i, j in pairs(bp_added_pools) do
    table.sort(self.P_CENTER_POOLS[i], function (a, b) return a.order < b.order end)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''--Fill all remaining info if this is the main desc'''
position = 'before'
payload = '''if card and card.ability and card.ability.bp_statement then
    local vars = {}
    for i2 = 1, #card.ability.bp_statement.args do
        local key = card.ability.bp_parlor_keys[card.ability.bp_statement.args[i2]]
        table.insert(vars, localize{type = 'name_text', key = key, set = 'Joker'})
    end
    local key = card.ability.bp_statement.main
    if key == 'empty' then
        if #card.ability.bp_statement.args == 2 then
            key = 'empty2'
        end
    end
    info_queue[#info_queue+1] = {key = key .. '_stat', set = 'Other', vars = vars} 
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif SMODS.ObjectTypes[_type] and SMODS.ObjectTypes[_type].rarities then'''
position = 'before'
payload = '''elseif (_type == "Draft") or (_type == "Blue") or (_type == "Green") or (_type == "Black") or (_type == "Red") or (_type == "Bedroom") or (_type == "Hallway") or (_type == "Shop") or (_type == "Food") then
    _rarity = (_legendary and 4) or (type(_rarity) == "number" and ((_rarity > 0.95 and 3) or (_rarity > 0.7 and 2) or 1)) or _rarity
    _rarity = ({Common = 1, Uncommon = 2, Rare = 3, Legendary = 4})[_rarity] or _rarity
    local rarity = _rarity or SMODS.poll_rarity("Joker", 'rarity'..G.GAME.round_resets.ante..(_append or ''))

    bp_pool_rarity = ((rarity ~= nil) and rarity) or _rarity
    _starting_pool, _pool_key = G['P_' .. string.upper(_type) .. '_RARITY_POOLS'][rarity], _type..rarity..((not _legendary and _append) or '')  
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _type == 'Edition' then _pool[#_pool + 1] = "e_foil"'''
position = 'before'
payload = '''elseif _type == 'Draft' then _pool[#_pool + 1] = "j_bp_gallery"
elseif _type == 'Blue' then _pool[#_pool + 1] = "j_bp_gallery"
elseif _type == 'Bedroom' then _pool[#_pool + 1] = "j_bp_bedroom"
elseif _type == 'Red' then _pool[#_pool + 1] = "j_bp_darkroom"
elseif _type == 'Hallway' then _pool[#_pool + 1] = "j_bp_hallway"
elseif _type == 'Shop' then _pool[#_pool + 1] = "j_bp_aquarium"
elseif _type == 'Green' then _pool[#_pool + 1] = "j_bp_conservatory"
elseif _type == 'Black' then _pool[#_pool + 1] = "j_bp_aquarium"
elseif _type == 'Food' then _pool[#_pool + 1] = "j_gros_michel"'''
match_indent = true